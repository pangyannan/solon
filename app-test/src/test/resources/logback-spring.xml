<?xml version="1.0" encoding="UTF-8"?>
<!--如若配置方式无法兼容应用方式，可以自定义xml的方式-->
<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 
	debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--读取spring环境变量-->
	<springProperty scope="context" name="APP_NAME" source="spring.application.name" defaultValue="solon" />
	<!--读取spring环境变量，定义日志的跟路径-->
	<springProperty scope="context" name="LOG_PATH" source="logging.logback.path" defaultValue="logs" />
	<!--读取spring环境变量，定义日志的保存天数-->
	<springProperty scope="context" name="MAX_HISTORY" source="logging.logback.rollingpolicy.maxHistory" defaultValue="90" />
	<!--读取spring环境变量，定义单个日志的大小，超过整个大小会自动归档-->
	<springProperty scope="context" name="MAX_FILE_SIZE" source="logging.logback.rollingpolicy.maxFileSize" defaultValue="512MB" />


	<!-- ConsoleAppender 控制台输出日志 -->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 控制台使用彩色输出-->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] [%X{traceId}] %highlight(%-5level) %cyan(%logger{20}) - %msg %n</pattern>
			<charset>UTF-8</charset>
		</encoder>
	</appender>

	<logger name="org.springframework" level="INFO" />
	<logger name="_org.springframework.web.servlet.HandlerMapping.Mappings" level="INFO" /> <!--主要是打印了路径映射关系,不需要-->
	<logger name="io.lettuce.core.protocol" level="INFO" />
	<logger name="io.lettuce.core.RedisChannelHandler" level="INFO" />
<!--	<logger name="com.zaxxer.hikari" level="INFO" />-->
<!--	<logger name="org.mybatis.spring" level="INFO" />-->

	<root level="DEBUG">
		<appender-ref ref="STDOUT" />
	</root>


</configuration>